package com.demo.scaler.Array2D.Advanced;import java.util.List;public class FindMaxDistance {    //Problem Description    //Given an array, A of integers of size N. Find the maximum value of j - i such that A[i] <= A[j].    //    //    //    //Problem Constraints    //1 <= N <= 105    //    //-109 <= A[i] <= 109    //    //    //    //Input Format    //First argument is an integer array A of size N.    //    //    //    //Output Format    //Return an integer denoting the maximum value of j - i.    //    //    //    //Example Input    //Input 1:    //    //A = [3, 5, 4, 2]    //Input 2:    //    //A = [4, 1, 3, 0]    //    //    //Example Output    //Output 1:    //    //2    //Output 2:    //    //1    //    //    //Example Explanation    //Explanation 1:    //    //For A[0] = 3 and A[2] = 4, the ans is (2 - 0) = 2.    //Explanation 2:    //    //For A[1] = 1 and A[2] = 3, the ans is (2 - 1) = 1.    public static void main(String[] args) {    }    public int maximumGap(final List<Integer> A) {        int n = A.size();        if (n == 1)            return 0;        //1.Calculate right max of an array        int[] rmax = new int[n];        rmax[n - 1] = A.get(n - 1);        for (int i = 1; i < n; i++) {            rmax[n - 1 - i] = Math.max(rmax[n - i], A.get(n - 1 - i));        }        int x = 0;        int y = 0;        int ans = 0;        //2. Check if right max array element is greater than my current element of A then increment the pointer on right max        // and keep updating the ans.        //3. When your array(A) element becomes greater than the current right max element than increment the pointer for A.        // and check if their is a better ans than current max        while (x < n && y < n) {            if (rmax[x] >= A.get(y)) {                ans = Math.max(ans, x - y);                x++;            } else {                y++;            }        }        // System.out.println(ans);        return ans;    }}